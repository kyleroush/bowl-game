{"version":3,"sources":["firestore.js","SessionsPage.js","PlayersPage.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","database","useStyles","firestore","makeStyles","theme","margin","spacing","extendedIcon","marginRight","SessionsPage","props","List","warning","ListItem","Typography","color","TextField","id","label","variant","Fab","aria-label","className","onClick","session","document","getElementById","value","wordsPerPerson","parseInt","Math","random","toString","substring","ref","once","snapshot","val","update","players","gottenWords","globalGameState","setAppState","window","history","pushState","Divider","defaultValue","helperText","PlayersPage","name","words","ready","gameState","player","Game","onAddWords","wordCount","Array","fill","map","_","i","filter","word","gameStates","waiting","setState","yourTurn","state","that","aviableWords","concat","playerObj","undefined","n","includes","loc","floor","length","currentWord","splice","nextWord","push","finalWord","newGottenWords","getSnapshotGottenWords","postTurn","finishTurn","renderGottenWords","ListItemText","key","renderDuringTurn","Card","CardContent","resetSession","addingWords","reuseWords","toggleReady","startGame","teamCount","teams","score","Object","keys","count","kickPlayer","renderReady","renderPlayers","open","button","primary","Collapse","in","timeout","unmountOnExit","renderTeams","Grid","item","xs","renderResets","this","on","component","renderAddWords","renderStartTurn","React","Component","App","setValue","newMap","joinSession","location","pathname","replace","search","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cbde8f1.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDYIdFDQ3ccmgUHsEJC7EQuPGyX3U0BKoM\",\n    authDomain: \"reactemoji.firebaseapp.com\",\n    databaseURL: \"https://reactemoji.firebaseio.com\",\n    projectId: \"reactemoji\",\n    storageBucket: \"reactemoji.appspot.com\",\n    messagingSenderId: \"720480809303\",\n    appId: \"1:720480809303:web:c82a2de9d2d14ab1a9ce12\",\n    measurementId: \"G-C64FSH40V9\"\n  };\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport const db = firebase.database();\nexport const firestore = firebase.firestore();\nexport default firestore;\n","import React from 'react';\nimport {TextField, Fab, Divider, Typography} from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {db} from './firestore';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction SessionsPage(props) {\n\n  const setSession = ()=> {\n    var session = document.getElementById(\"session\").value;\n\n    db.ref(`BowlGame/${session}`).once(\"value\", snapshot => {\n\n      if (snapshot.val() !== null ) {\n        var wordsPerPerson = snapshot.val().wordsPerPerson;\n        props.setAppState(\n          {\n            session,\n            wordsPerPerson\n          });\n          // History.push(`/bowl-game/${session}`)\n          window.history.pushState({},  session, `/bowl-game/${session}`)\n      }else {\n        props.setAppState({warning: \"this session doesnt exist\"});\n      }\n    });\n\n  };\n\n  const createSession = ()=> {\n\n    var session = document.getElementById(\"session\").value;\n    var wordsPerPerson = parseInt(document.getElementById(\"words-per-person\").value);\n    if (session === \"\") {\n      session = Math.random().toString(36).substring(2, 10);\n    }\n    db.ref(`BowlGame/${session}`).once(\"value\", snapshot => {\n\n      if (snapshot.val()===null) {\n        db.ref(`BowlGame/${session}`).update({\n          players: {},\n          gottenWords: [],\n          wordsPerPerson,\n          globalGameState: \"waiting\",\n        });\n\n        props.setAppState(\n          {\n            session: session,\n            wordsPerPerson\n          });\n\n          window.history.pushState({},  session, `/bowl-game/${session}`)\n        }\n    });\n    \n  };\n  return (\n    <List>\n      {props.warning !== \"\" && \n        <ListItem>\n          <Typography color=\"textSecondary\" >\n            {props.warning}\n          </Typography>\n        </ListItem>\n      }\n      <ListItem>\n        <TextField id=\"session\" label=\"Session\" variant=\"outlined\" />\n      </ListItem>\n      <ListItem>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"create\" className={useStyles().margin} onClick={createSession}>\n          Create Bowl Game Session\n        </Fab>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" className={useStyles().margin} onClick={setSession}>\n          Join Bowl Game Session\n        </Fab>\n      </ListItem>\n      <Divider />\n      <ListItem>\n        <TextField id=\"words-per-person\" label=\"# of words\" variant=\"outlined\" defaultValue={3} helperText=\"number of words per person\"/>\n      </ListItem>\n    </List>\n  );\n}\n\nexport default SessionsPage;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {db} from './firestore';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction PlayersPage(props) {\n\n  const setPlayer = ()=> {\n    var {session} = props;\n    var name = document.getElementById(\"name\").value;\n\n    db.ref(`BowlGame/${session}/players/${name}`).update({\n      name,\n      words: [],\n      ready: false,\n      gameState: \"addingWords\",\n    })\n\n    props.setAppState({player: name});\n    window.history.pushState({},  session, `?player=${name}`)\n  };\n  return (\n    <List>\n      <ListItem>\n        <TextField id=\"name\" label=\"Name\" variant=\"outlined\" />\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" className={useStyles().margin} onClick={setPlayer}>\n          Create player\n        </Fab>\n      </ListItem>\n    </List>\n  );\n}\n\nexport default PlayersPage;\n","import React from 'react';\nimport {TextField, List, ListItem, ListItemText, Fab, Card, CardContent, Typography, Divider, Collapse, Grid, Paper} from '@material-ui/core';\nimport {db} from './firestore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameState: \"addingWords\",\n      words: null,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: [],\n      snapshot:null\n    }\n\n    this.gameStates = {\n      addingWords: \"addingWords\",\n      yourTurn: \"yourTurn\",\n      postTurn: \"postTurn\",\n      waiting: \"waiting\",\n    }\n  }\n\n  componentDidMount() {  \n    var {session, player} = this.props;\n    var that = this;\n\n    db.ref(`BowlGame/${session}`).on(\"value\", snapshot => {\n      that.setState({\n        snapshot: snapshot.val(),\n        gameState: snapshot.val().players[player].gameState\n      })\n    });\n  }\n\n  onAddWords = () => {\n    var {wordCount, player, session} = this.props;\n\n    var words = Array(wordCount)\n        .fill().map((_, i) => document.getElementById(`word-${i}`).value)\n        .filter(word => word !== \"\");\n    // filter out bad words\n\n    db.ref(`BowlGame/${session}/players/${player}`).update({\n      name: player,\n      words,\n      gameState: this.gameStates.waiting\n    })\n    this.setState({gameState: this.gameStates.waiting});\n  }\n\n  renderAddWords() {\n    var {wordCount, player, session} = this.props;\n    return (\n      <div>\n        <Typography>\n          Add words to the bowl\n        </Typography>\n        <List component=\"nav\"  aria-label=\"contacts\">\n          {Array(wordCount).fill().map((_, i) => <ListItem  key={`word-${i}`}><TextField id={`word-${i}`} label={`${i+1} word`} variant=\"outlined\" /></ListItem>)}\n        </List>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.onAddWords}>\n          Add Words\n        </Fab>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={() => {\n\n          db.ref(`BowlGame/${session}/players/${player}`).update({\n            gameState: this.gameStates.waiting\n          })\n          this.setState({gameState: this.gameStates.waiting})}\n          \n        }>\n          Skip Adding words\n        </Fab>\n      </div>\n      );\n  }\n\n  yourTurn= () => {\n    var {player, session} = this.props;\n\n    var { snapshot } = this.state;\n    var that = this;\n    var aviableWords  = [];\n    var gottenWords  = [];\n\n    gottenWords = gottenWords.concat(snapshot.gottenWords)\n\n    for (const player in snapshot.players) {\n      var playerObj = snapshot.players[player];\n      if(playerObj.words !== undefined)\n        aviableWords = aviableWords.concat(playerObj.words)\n    }\n\n    aviableWords = aviableWords.filter(n => !gottenWords.includes(n));\n    \n    var loc = Math.floor(Math.random() * aviableWords.length)\n    var currentWord = aviableWords[loc];\n    aviableWords.splice(loc, 1);\n    db.ref(`BowlGame/${session}/players/${player}`).update({\n      gameState: this.gameStates.yourTurn\n    })\n    that.setState({\n      gameState: this.gameStates.yourTurn,\n      aviableWords: aviableWords,\n      currentWord: currentWord,\n      gottenWords: [],\n    });\n  }\n\n  nextWord = () => {\n    var {currentWord, aviableWords, gottenWords} = this.state;\n\n    var loc = Math.floor(Math.random() * aviableWords.length)\n    \n    gottenWords.push(currentWord)\n    currentWord = aviableWords[loc];\n    aviableWords.splice(loc, 1);\n    this.setState({\n      aviableWords: aviableWords,\n      currentWord: currentWord,\n      gottenWords: gottenWords\n    })\n  }\n\n  finalWord = () => {\n    var {gottenWords, currentWord} = this.state;\n    var {session} = this.props;\n    gottenWords.push(currentWord)\n\n    var newGottenWords = gottenWords.concat(this.getSnapshotGottenWords());\n\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: newGottenWords\n    });\n    // upload gotten words\n\n    \n    this.setState({\n      gameState: this.gameStates.postTurn,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: gottenWords\n    })\n  }\n\n  getSnapshotGottenWords = () => {\n    var {snapshot} = this.state;\n    return snapshot.gottenWords===undefined? [] :snapshot.gottenWords;\n  }\n\n  finishTurn = () => {\n    var {gottenWords} = this.state;\n    var {session, player} = this.props;\n    \n    var newGottenWords = gottenWords.concat(this.getSnapshotGottenWords());\n\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: newGottenWords\n    });\n    // upload gotten words\n\n    db.ref(`BowlGame/${session}/players/${player}`).update({\n      gameState: this.gameStates.postTurn\n    })\n    this.setState({\n      gameState: this.gameStates.postTurn,\n      aviableWords: [],\n      currentWord: null\n    })\n  }\n\n  renderGottenWords = () => {\n    var {gottenWords} = this.state;\n    return (\n      <List>\n        <ListItem >\n              <ListItemText>\n                You got {gottenWords.length} number of words. and the words you got are ...\n              </ListItemText>\n            </ListItem>\n       {\n        gottenWords.map(word => {\n          return (\n            <ListItem key={word}>\n              <ListItemText>\n                {word}\n              </ListItemText>\n            </ListItem>)\n          })\n        }\n        <ListItem>\n          <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={() => this.setState({gameState: this.gameStates.waiting, gottenWords:[]})}>\n            Finished\n          </Fab>\n        </ListItem>\n      </List>\n    )\n  }\n\n  renderStartTurn() {\n    var {snapshot} = this.state\n    var aviableWords =[];\n\n    for (const player in snapshot.players) {\n      var playerObj = snapshot.players[player];\n      if(playerObj.words !== undefined)\n        aviableWords = aviableWords.concat(playerObj.words)\n    }\n\n    aviableWords = aviableWords.filter(n => !this.getSnapshotGottenWords().includes(n));\n    if (aviableWords.length ===0) {\n      return;\n    }\n\n    return (\n      <div>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.yourTurn}>\n          Start Turn\n        </Fab>\n      </div>\n    )\n  }\n\n  renderDuringTurn = () => {\n    var {currentWord, aviableWords} = this.state;\n\n    return(\n      <div>\n        <Card>      \n          <CardContent>\n            <Typography color=\"textPrimary\" >\n              your word is \n            </Typography>\n            <Typography color=\"textSecondary\" >\n              {currentWord}\n            </Typography>\n          </CardContent>\n        </Card>\n\n        {\n          aviableWords.length !==0? \n            <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.nextWord}>\n              Gotten Word\n            </Fab>: \n            <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.finalWord}>\n              Gotten Final Word\n            </Fab>\n        }\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.finishTurn}>\n          End Turn\n        </Fab>\n      </div>\n    )\n  }\n\n  resetSession = () => {\n    var {session, player} = this.props;\n    var {snapshot} = this.state;\n    var update = {};\n\n    for (const player in snapshot.players) {\n      update[player] = {\n        name: player,\n        ready: false\n      }\n    }\n\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: [],\n      players: update,\n      globalGameState: \"waiting\",\n    });\n\n\n    db.ref(`BowlGame/${session}/players/${player}`).update({\n      gameState: this.gameStates.addingWords\n    })\n\n    this.setState({\n      gameState: this.gameStates.addingWords,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: [],\n    });\n  }\n\n  reuseWords = () => {\n    var {session, player} = this.props\n\n    // make a request to reset game\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: []\n    });\n\n    db.ref(`BowlGame/${session}/players/${player}`).update({\n      gameState: this.gameStates.waiting\n    })\n    this.setState({\n      gameState: this.gameStates.waiting,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: []\n    });\n  }\n\n  toggleReady = () => {\n    var {session, player} = this.props\n    var {snapshot} = this.state\n\n    var update = snapshot.players[player];\n    update.ready = !update.ready; \n\n    db.ref(`BowlGame/${session}/players/${player}`).update(update)\n  }\n\n  startGame = () => {\n    var {session, teamCount} = this.props;\n    var {snapshot} = this.state;\n\n    teamCount = 2;\n    \n    var teams = Array(teamCount).fill([]).map(_ => { return { players: [], score: 0 } });\n    var players = Object.keys(snapshot.players);\n    var count = 0;\n    while(0 < players.length) {\n      var loc = Math.floor(Math.random() * Object.keys(snapshot.players).length);\n      teams[count % teamCount].players.push(players[loc]);\n      players.splice(loc, 1);\n    }\n\n    db.ref(`BowlGame/${session}`).update({\n      globalGameState: \"playing\",\n      teams\n    });\n  }\n\n  kickPlayer = (player) => {\n    var {session} = this.props\n    var {players} = this.state.snapshot\n\n    players[player] = {}\n\n\n    db.ref(`BowlGame/${session}/players/`).update(players)\n  }\n\n  renderReady = () => {\n    var {player} = this.props\n    var {snapshot} = this.state\n    return (\n      <div>\n        <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.toggleReady} >\n          {!snapshot.players[player].ready? \"Ready to start\": \"Not Ready\"}\n        </Fab>\n        {snapshot.players[player].ready && <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.startGame} >\n          Start Game \n        </Fab>}\n      </div>\n      );\n  }\n\n  renderPlayers = () => {\n    var {snapshot, open} = this.state\n\n    const toggleOpen = () => {\n      this.setState({open: !open});\n    };\n\n    if(snapshot === null) {\n      return(<List></List>)\n    }\n\n    return (\n      <List>\n        <ListItem button onClick={toggleOpen}>\n        \n          <ListItemText primary=\"Players\" />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List >\n            {\n              Object.keys(snapshot.players).map((key) => {\n                return(<ListItem key={key}>\n                  <ListItemText>\n                    player: {key}\n                  </ListItemText>\n                  <ListItemText>\n                    {snapshot.globalGameState === \"waiting\" && snapshot.players[key].ready === true && `is ready`}\n                  </ListItemText>\n\n                  <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={() => this.kickPlayer(key)} >\n                    Kick Player from Game\n                  </Fab>\n                </ListItem>);\n              })\n            }\n          </List>\n        </Collapse>\n      </List>);\n  }\n\n  renderTeams = () => {\n    var {snapshot, open} = this.state\n\n    const toggleOpen = () => {\n      this.setState({open: !open});\n    };\n\n    if(snapshot === null) {\n      return(<List></List>)\n    }\n\n    return (\n      <List>\n        <ListItem button onClick={toggleOpen}>\n        \n          <ListItemText primary=\"Teams\" />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <Grid>\n            { \n              Object.keys(snapshot.teams).map((key) => {\n                return(\n                  <Grid item key={key} xs={12}>\n                    <List>\n                      <ListItem >\n                        <ListItemText primary={`Team ${key}`} />\n                        {/* <ListItemText primary={`score ${snapshot.teams[key].score}`} /> */}\n                      </ListItem>\n                      {(snapshot.teams[key].players || []).map((player => {\n                        return (\n                          <ListItem >\n                            <ListItemText primary={`player: ${player}`} />\n                          </ListItem>);\n                        }))}\n                    </List>\n                  </Grid>\n                  );\n              })\n            }\n          </Grid>\n        </Collapse>\n      </List>);\n  }\n\n  renderResets = () => {\n    return(\n      <div>\n        <Divider />\n        <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.reuseWords} >\n          Put words back in bowl\n        </Fab>\n        <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.resetSession} >\n          End Game and start new?\n        </Fab>\n      </div>\n    )\n  }\n\n  render() {\n    var {session, player} = this.props;\n    var {gameState, snapshot} = this.state;\n\n    if(snapshot === null) {\n      return (\n        <Typography>\n          ... Loading\n        </Typography>\n      )\n    }\n\n    return (\n      <div>\n        <h1>Hello, {player}! You have joined {session}.</h1>\n        {snapshot.globalGameState === \"waiting\" \n            && gameState === this.gameStates.addingWords \n            && this.renderAddWords()}\n        {snapshot.globalGameState === \"waiting\" \n            && gameState === this.gameStates.waiting \n            && this.renderReady()}\n        {snapshot.globalGameState === \"playing\" \n            && (gameState === this.gameStates.yourTurn \n                  ? this.renderDuringTurn() \n                  : this.renderStartTurn())}\n        {snapshot.globalGameState === \"playing\" \n            && gameState === this.gameStates.waiting  \n            && this.renderResets()}\n        {snapshot.globalGameState === \"playing\" \n            && gameState === this.gameStates.postTurn  \n            && this.renderGottenWords()}\n        {gameState === this.gameStates.waiting \n            && snapshot.teams ? this.renderTeams() : this.renderPlayers()}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n\n// teams\n//   score\n// count down\n// list players\n// validation/warnings (player name, etc)\n//  refresh page/url\n","import React from 'react';\nimport SessionsPage from './SessionsPage';\nimport PlayersPage from './PlayersPage';\nimport Game from './Game';\nimport {db} from './firestore';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      session: null,\n      player: null,\n      warning: \"\",\n    };\n  }\n\n  setValue = (newMap) => {\n    this.setState(newMap);\n  };\n\n  joinSession = ()=> {\n    var session = document.getElementById(\"session\").value;\n\n    db.ref(`BowlGame/${session}`).once(\"value\", snapshot => {\n\n      if (snapshot.val() !== null ) {\n        var wordsPerPerson = snapshot.val().wordsPerPerson;\n        this.setState(\n          {\n            session,\n            wordsPerPerson\n          });\n      }else {\n        // props.setAppState({warning: \"this session doesnt exist\"});\n      }\n    });\n\n  };\n\n\n  componentDidMount() {  \n    var session = window.location.pathname.replace(\"/bowl-game/\", \"\");\n    var player = window.location.search.replace(\"?player=\", \"\");\n    if(session !== \"\") {\n      db.ref(`BowlGame/${session}`).once(\"value\", snapshot => {\n\n        if (snapshot.val() !== null ) {\n          var wordsPerPerson = snapshot.val().wordsPerPerson;\n          var update = {\n            session,\n            wordsPerPerson\n          };\n\n          if (snapshot.val().players[player] !== undefined) {\n            update.player = player;\n          }\n          this.setState(update);\n        }else {\n\n        }\n      });\n    }\n  }\n\n  render() {\n    var {session, player, warning, wordsPerPerson} = this.state;\n\n    return (\n      <div>\n        <h1>The Bowl Game</h1>\n        {session == null && <SessionsPage setAppState={this.setValue}/>}\n        {session != null && player == null && <PlayersPage session={session} setAppState={this.setValue} warning={warning} />}\n        {session != null && player != null && <Game session={session} player={player} wordCount={wordsPerPerson}/>}\n      </div>\n    )\n    // if (session == null) {\n    //   return <SessionsPage setSession={null}/>\n    // }\n    // if (player == null) {\n    //   return <PlayersPage setSession={null}/>\n    // }\n    // return <h1>Hello, {session}</h1>;\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}