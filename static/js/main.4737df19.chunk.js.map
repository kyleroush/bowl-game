{"version":3,"sources":["firestore.js","SessionsPage.js","PlayersPage.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","database","useStyles","firestore","makeStyles","theme","margin","spacing","extendedIcon","marginRight","SessionsPage","props","List","warning","ListItem","Typography","color","TextField","id","label","variant","Fab","aria-label","className","onClick","session","document","getElementById","value","wordsPerPerson","parseInt","Math","random","toString","substring","ref","once","snapshot","val","update","players","gottenWords","setAppState","Divider","defaultValue","helperText","PlayersPage","name","words","player","Game","onAddWords","wordCount","Array","fill","map","_","i","setState","gameState","gameStates","playing","yourTurn","state","that","aviableWords","concat","playerObj","filter","n","includes","loc","floor","length","currentWord","splice","nextWord","push","finalWord","newGottenWords","getSnapshotGottenWords","undefined","finishTurn","renderDuringTurn","Card","CardContent","resetSession","addingWords","reuseWords","markReady","ready","renderReady","renderPlayers","open","button","ListItemText","primary","Collapse","in","timeout","unmountOnExit","Object","keys","key","renderResets","readying","this","on","component","renderAddWords","renderStartTurn","React","Component","App","setValue","newMap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4737df19.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDYIdFDQ3ccmgUHsEJC7EQuPGyX3U0BKoM\",\n    authDomain: \"reactemoji.firebaseapp.com\",\n    databaseURL: \"https://reactemoji.firebaseio.com\",\n    projectId: \"reactemoji\",\n    storageBucket: \"reactemoji.appspot.com\",\n    messagingSenderId: \"720480809303\",\n    appId: \"1:720480809303:web:c82a2de9d2d14ab1a9ce12\",\n    measurementId: \"G-C64FSH40V9\"\n  };\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport const db = firebase.database();\nexport const firestore = firebase.firestore();\nexport default firestore;\n","import React from 'react';\nimport {TextField, Fab, Divider, Typography} from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {db} from './firestore';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction SessionsPage(props) {\n\n  const setSession = ()=> {\n    var session = document.getElementById(\"session\").value;\n\n    db.ref(`BowlGame/${session}`).once(\"value\", snapshot => {\n\n      if (snapshot.val() !== null ) {\n        var wordsPerPerson = snapshot.val().wordsPerPerson;\n        props.setAppState(\n          {\n            session,\n            wordsPerPerson\n          });\n      }else {\n        props.setAppState({warning: \"this session doesnt exist\"});\n      }\n    });\n\n  };\n\n  const createSession = ()=> {\n\n    var session = document.getElementById(\"session\").value;\n    var wordsPerPerson = parseInt(document.getElementById(\"words-per-person\").value);\n    if (session === \"\") {\n      session = Math.random().toString(36).substring(2, 10);\n    }\n    db.ref(`BowlGame/${session}`).once(\"value\", snapshot => {\n\n      if (snapshot.val()===null) {\n        db.ref(`BowlGame/${session}`).update({\n          players: {},\n          gottenWords: [],\n          wordsPerPerson\n        });\n\n        props.setAppState(\n          {\n            session: session,\n            wordsPerPerson\n          });\n        }\n    });\n    \n  };\n  return (\n    <List>\n      {props.warning !== \"\" && \n        <ListItem>\n          <Typography color=\"textSecondary\" >\n            {props.warning}\n          </Typography>\n        </ListItem>\n      }\n      <ListItem>\n        <TextField id=\"session\" label=\"Session\" variant=\"outlined\" />\n      </ListItem>\n      <ListItem>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"create\" className={useStyles().margin} onClick={createSession}>\n          Create Bowl Game Session\n        </Fab>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" className={useStyles().margin} onClick={setSession}>\n          Join Bowl Game Session\n        </Fab>\n      </ListItem>\n      <Divider />\n      <ListItem>\n        <TextField id=\"words-per-person\" label=\"# of words\" variant=\"outlined\" defaultValue={3} helperText=\"number of words per person\"/>\n      </ListItem>\n    </List>\n  );\n}\n\nexport default SessionsPage;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {db} from './firestore';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction PlayersPage(props) {\n\n  const setPlayer = ()=> {\n    var {session} = props;\n    var name = document.getElementById(\"name\").value;\n\n    db.ref(`BowlGame/${session}/players/${name}`).update({\n      name,\n      words: []\n    })\n\n    props.setAppState({player: name});\n  };\n  return (\n    <List>\n      <ListItem>\n        <TextField id=\"name\" label=\"Name\" variant=\"outlined\" />\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" className={useStyles().margin} onClick={setPlayer}>\n          Create player\n        </Fab>\n      </ListItem>\n    </List>\n  );\n}\n\nexport default PlayersPage;\n","import React from 'react';\nimport {TextField, List, ListItem, ListItemText, Fab, Card, CardContent, Typography, Divider, Collapse} from '@material-ui/core';\nimport {db} from './firestore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameState: \"addingWords\",\n      addingWords: true,\n      words: null,\n      yourTurn: false,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: [],\n      snapshot:null\n    }\n\n\n    this.gameStates = {\n      addingWords: \"addingWords\",\n      readying: \"readying\",\n      playing: \"playing\"\n    }\n  }\n\n  componentDidMount() {  \n    var {session} = this.props;\n    var that = this;\n\n    db.ref(`BowlGame/${session}`).on(\"value\", snapshot => {\n      that.setState({\n        snapshot: snapshot.val()\n      })\n    });\n  }\n\n  onAddWords = () => {\n    var {wordCount, player, session} = this.props;\n    var words = Array(wordCount).fill().map((_, i) => document.getElementById(`word-${i}`).value);\n    // filter out bad words\n\n    db.ref(`BowlGame/${session}/players/${player}`).update({\n      name: player,\n      words\n    })\n    this.setState({gameState: this.gameStates.playing});\n  }\n\n  renderAddWords() {\n    var {wordCount} = this.props;\n    return (\n      <div>\n        <Typography>\n          Add words to the bowl\n        </Typography>\n        <List component=\"nav\"  aria-label=\"contacts\">\n          {Array(wordCount).fill().map((_, i) => <ListItem  key={`word-${i}`}><TextField id={`word-${i}`} label={`${i+1} word`} variant=\"outlined\" /></ListItem>)}\n        </List>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.onAddWords}>\n          Add Words\n        </Fab>: \n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={() => this.setState({gameState: this.gameStates.playing})}>\n          Skip Adding words\n        </Fab>\n      </div>\n      );\n  }\n\n  yourTurn= () => {\n    var { snapshot } = this.state;\n    var that = this;\n    var aviableWords  = [];\n    var gottenWords  = [];\n\n    gottenWords = gottenWords.concat(snapshot.gottenWords)\n\n    for (const player in snapshot.players) {\n      var playerObj = snapshot.players[player];\n      aviableWords = aviableWords.concat(playerObj.words)\n    }\n\n    aviableWords = aviableWords.filter(n => !gottenWords.includes(n));\n    \n    var loc = Math.floor(Math.random() * aviableWords.length)\n    var currentWord = aviableWords[loc];\n    aviableWords.splice(loc, 1);\n    \n    that.setState({\n      yourTurn: true,\n      aviableWords: aviableWords,\n      currentWord: currentWord,\n      gottenWords: [],\n    });\n  }\n\n  nextWord = () => {\n    var {currentWord, aviableWords, gottenWords} = this.state;\n\n    var loc = Math.floor(Math.random() * aviableWords.length)\n    \n    gottenWords.push(currentWord)\n    currentWord = aviableWords[loc];\n    aviableWords.splice(loc, 1);\n    this.setState({\n      aviableWords: aviableWords,\n      currentWord: currentWord,\n      gottenWords: gottenWords\n    })\n  }\n\n  finalWord = () => {\n    var {gottenWords, currentWord} = this.state;\n    var {session} = this.props;\n    gottenWords.push(currentWord)\n\n    var newGottenWords = gottenWords.concat(this.getSnapshotGottenWords());\n\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: newGottenWords\n    });\n    // upload gotten words\n    this.setState({\n      yourTurn: false,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: []\n    })\n  }\n\n  getSnapshotGottenWords = () => {\n    var {snapshot} = this.state;\n    return snapshot.gottenWords===undefined? [] :snapshot.gottenWords;\n  }\n\n  finishTurn = () => {\n    var {gottenWords} = this.state;\n    var {session} = this.props;\n    \n    var newGottenWords = gottenWords.concat(this.getSnapshotGottenWords());\n\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: newGottenWords\n    });\n    // upload gotten words\n    this.setState({\n      yourTurn: false,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: []\n    })\n  }\n\n  renderStartTurn() {\n\n    return (\n      <div>\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.yourTurn}>\n          Start Turn\n        </Fab>\n      </div>\n    )\n  }\n\n  renderDuringTurn = () => {\n    var {currentWord, aviableWords} = this.state;\n    return(\n      <div>\n        <Card>      \n          <CardContent>\n            <Typography color=\"textPrimary\" >\n              your word is \n            </Typography>\n            <Typography color=\"textSecondary\" >\n              {currentWord}\n            </Typography>\n          </CardContent>\n        </Card>\n\n        {\n          aviableWords.length !==0? \n            <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.nextWord}>\n              Gotten Word\n            </Fab>: \n            <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.finalWord}>\n              Gotten Final Word\n            </Fab>\n        }\n        <Fab variant=\"extended\" color=\"primary\" aria-label=\"join\" onClick={this.finishTurn}>\n          End Turn\n        </Fab>\n      </div>\n    )\n  }\n\n  resetSession = () => {\n    var {session} = this.props;\n    var {snapshot} = this.state;\n    var update = {};\n\n    for (const player in snapshot.players) {\n      update[player] = {\n        name: player\n      }\n    }\n\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: [],\n      players: update\n    });\n\n    this.setState({\n      addingWords: true,\n      yourTurn: false,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: []\n    });\n  }\n\n  reuseWords = () => {\n    var {session} = this.props\n\n    // make a request to reset game\n    db.ref(`BowlGame/${session}`).update({\n      gottenWords: []\n    });\n\n    this.setState({\n      addingWords: false,\n      yourTurn: false,\n      aviableWords: [],\n      currentWord: null,\n      gottenWords: []\n    });\n  }\n\n  markReady = () => {\n    var {session, player} = this.props\n    var {snapshot} = this.state\n\n    var update = snapshot.players[player];\n    update.ready = true; \n\n    db.ref(`BowlGame/${session}/players/${player}`).update(update)\n  }\n\n  renderReady = () => {\n    return (\n      <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.markReady} >\n        Ready to start\n      </Fab>);\n  }\n\n  renderPlayers = () => {\n    var {snapshot, open} = this.state\n\n    const toggleOpen = () => {\n      this.setState({open: !open});\n    };\n\n    if(snapshot === null) {\n      return(<List></List>)\n    }\n\n    return (\n      <List>\n        <ListItem button onClick={toggleOpen}>\n        \n          <ListItemText primary=\"Players\" />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List >\n            {\n              Object.keys(snapshot.players).map((key) => {\n                return(<ListItem key={key}>\n                  <ListItemText>\n                    player: {key} {snapshot.players[key].words !== undefined? \"words submitted\" : \"needs to submit words\"}\n                  </ListItemText>\n                </ListItem>)\n              })\n            }\n          </List>\n        </Collapse>\n      </List>);\n  }\n\n  renderResets = () => {\n    return(\n      <div>\n        <Divider />\n        <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.reuseWords} >\n          Put words back in bowl\n        </Fab>\n        <Fab variant=\"extended\" color=\"secondary\" aria-label=\"join\" onClick={this.resetSession} >\n          End Game and start new?\n        </Fab>\n      </div>\n    )\n  }\n\n  render() {\n    var {session, player} = this.props;\n    var {yourTurn, gameState} = this.state;\n\n    return (\n      <div>\n        <h1>Hello, {player}! You have joined {session}.</h1>\n        {gameState === this.gameStates.addingWords && this.renderAddWords()}\n        {gameState === this.gameStates.playing && (yourTurn? this.renderDuringTurn(): this.renderStartTurn())}\n        {gameState === this.gameStates.playing && !yourTurn && this.renderResets()}\n        {!yourTurn && this.renderPlayers()}\n      </div>\n    );\n  }\n}\nexport default Game;\n\n// teams\n// count down\n// score\n// display words gotten\n// list players\n// validation/warnings (player name, etc)\n","import React from 'react';\nimport SessionsPage from './SessionsPage';\nimport PlayersPage from './PlayersPage';\nimport Game from './Game';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      session: null,\n      player: null,\n      warning: \"\",\n    };\n  }\n\n  setValue = (newMap) => {\n    this.setState(newMap);\n  };\n\n\n\n  render() {\n    var {session, player, warning, wordsPerPerson} = this.state;\n\n    return (\n      <div>\n        <h1>The Bowl Game</h1>\n        {session == null && <SessionsPage setAppState={this.setValue}/>}\n        {session != null && player == null && <PlayersPage session={session} setAppState={this.setValue} warning={warning} />}\n        {session != null && player != null && <Game session={session} player={player} wordCount={wordsPerPerson}/>}\n      </div>\n    )\n    // if (session == null) {\n    //   return <SessionsPage setSession={null}/>\n    // }\n    // if (player == null) {\n    //   return <PlayersPage setSession={null}/>\n    // }\n    // return <h1>Hello, {session}</h1>;\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}